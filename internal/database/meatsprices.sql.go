// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: meatsprices.sql

package database

import (
	"context"
)

const addingDefaultMeatPrices = `-- name: AddingDefaultMeatPrices :one
INSERT INTO meatprices(id, created_at, updated_at, meat_source, meatcut, price)
VALUES($1,$2,$3,$4,$5,$6)
RETURNING id, created_at, updated_at, meat_source, meatcut, price
`

type AddingDefaultMeatPricesParams struct {
	ID         string
	CreatedAt  string
	UpdatedAt  string
	MeatSource string
	Meatcut    string
	Price      float64
}

func (q *Queries) AddingDefaultMeatPrices(ctx context.Context, arg AddingDefaultMeatPricesParams) (Meatprice, error) {
	row := q.db.QueryRowContext(ctx, addingDefaultMeatPrices,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.MeatSource,
		arg.Meatcut,
		arg.Price,
	)
	var i Meatprice
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MeatSource,
		&i.Meatcut,
		&i.Price,
	)
	return i, err
}

const getAllDefaultMeatPrices = `-- name: GetAllDefaultMeatPrices :many
SELECT id, created_at, updated_at, meat_source, meatcut, price FROM meatprices
`

func (q *Queries) GetAllDefaultMeatPrices(ctx context.Context) ([]Meatprice, error) {
	rows, err := q.db.QueryContext(ctx, getAllDefaultMeatPrices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meatprice
	for rows.Next() {
		var i Meatprice
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MeatSource,
			&i.Meatcut,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
